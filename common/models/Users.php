<?php

namespace common\models;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "{{%user}}".
 *
 * @property int $id
 * @property string $username
 * @property string $auth_key
 * @property string $password_hash
 * @property string|null $password_reset_token
 * @property string $email
 * @property int $status
 * @property int $created_at
 * @property int $updated_at
 * @property string|null $password
 * @property string|null $verification_token
 * @property int $role_id
 * @property int $is_delete
 * @property string|null $other_roles
 *
 * @property UserRole $role
 */
class Users extends \yii\db\ActiveRecord
{
    public $password;
    public $old_password;
    public $repeat_password;

    public function behaviors()
    {
        return [
            TimestampBehavior::class
        ];
    }
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%user}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['old_password'], 'check_pass','on'=>'change_password'],
            [['password','old_password','repeat_password'],'required','on' => 'change_password'],
            ['repeat_password', 'compare', 'compareAttribute'=>'password', 'message'=>"Passwords don't match",'on' => 'change_password' ],
            ['password','string'],
            [[ 'email','username'], 'unique'],
            [[ 'other_roles'], 'safe'],
            [[ 'email'], 'email'],
            [['username', 'email'], 'required'],
            [['status', 'created_at', 'updated_at', 'role_id','is_delete'], 'integer'],
            [['username', 'password_hash', 'password_reset_token', 'email', 'verification_token'], 'string', 'max' => 255],
            [['auth_key'], 'string', 'max' => 32],
            [['username'], 'unique'],
            [['email'], 'unique'],
            [['password_reset_token'], 'unique'],
            [['role_id'], 'exist', 'skipOnError' => true, 'targetClass' => UserRole::class, 'targetAttribute' => ['role_id' => 'role_id']],
        ];
    }

    public function check_pass($attribute, $params){
        if(!Yii::$app->security->validatePassword($this->old_password,Yii::$app->user->identity->password_hash))
            $this->addError($attribute,'Please enter correct password.');
    }

    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'username' => Yii::t('app', 'Username'),
            'auth_key' => Yii::t('app', 'Auth Key'),
            'password_hash' => Yii::t('app', 'Password Hash'),
            'password_reset_token' => Yii::t('app', 'Password Reset Token'),
            'email' => Yii::t('app', 'Email'),
            'status' => Yii::t('app', 'Status'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'verification_token' => Yii::t('app', 'Verification Token'),
            'role_id' => Yii::t('app', 'Role'),
        ];
    }

    /**
     * Gets query for [[Role]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getRole()
    {
        return $this->hasOne(UserRole::className(), ['role_id' => 'role_id']);
    }

    public function beforeSave($insert)
    {
        if(!$this->auth_key){
            $this->auth_key = Yii::$app->security->generateRandomString();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
